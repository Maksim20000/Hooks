1) как результат хуков мы всегда получаем 2 элемента 1 сам state
    2 функция которая может менять этот же state

useState - Хук useState() отвечает за работу с состоянием внутри компонента.
    В отличие от классовых компонентов, хук занимается сразу всем:
    инициализацией, обновлением и предоставляет доступ к состоянию

2) хук useEffect - помогает нам выполнить побочный эффект в функциональной компонете.
    этот хук помогает избежать избыточного кода в классовой компоненте. Помогает сгрупировать связанный код
    useEffect(() => {
            console.log('вызов')
        }, // если здесь ничего не будет то бубет вызываться после каждой функции
        [] // если так то будет вызываться 1 раз в начале === componentDidMount
        [todos] // когда измеяется именно состояния вызывается эта фигня
        )
    // подгружает элементы со сторого стата при перезагрузке страницы
    useEffect(() => {
            debugger
            let raw = localStorage.getItem('todos')
            // "[{\"id\":1686789727401,\"title\":\"1221\",\"completed\":false},{\"id\":1686789729147,\"title\":\"1221\",\"completed\":false}]"
            // если приходит вот такая фигня использую этот метод
            setTodos(JSON.parse(raw))
        }, [])

    // если в хуке мы вызывем  то происходит утечка памяти
    document.addEventListener('click', handleClick)

    если мне это понадобится то после вызываю это
    return() => {
                document.removeEventListener('click', handleClick)
            }

3)

